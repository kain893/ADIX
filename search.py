#!/usr/bin/env python3
from aiogram import Bot, Dispatcher, types
from database import SessionLocal, Ad, User, AdChat, Sale, AdComplaint
from config import MAIN_CATEGORIES, CITY_STRUCTURE
from utils import main_menu_keyboard

def register_search_handlers(bot: Bot, dp: Dispatcher, user_steps: dict):
    """
    –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ª–æ–≥–∏–∫–æ–π:
      1) –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
      2) –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞/–æ–∫—Ä—É–≥–∞
      3) –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –≤—Å–µ)
      4) –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
      5) –ü–æ–∏—Å–∫, –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ (10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
      6) –ö–Ω–æ–ø–∫–∏ ¬´–∫—É–ø–∏—Ç—å¬ª, ¬´–¥–µ—Ç–∞–ª–∏¬ª, ¬´–Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É¬ª, –∏ —Ç–µ–ø–µ—Ä—å:
         - –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ => ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª
         - –∏–Ω–∞—á–µ => ¬´–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è¬ª
    """

    @dp.message(func=lambda m: m.text == "üîç–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    async def start_search_flow(message: types.Message):
        chat_id = message.chat.id
        user_steps[chat_id] = {
            "mode": "search_flow",
            "picked_region": None,
            "region_list": [],
            "city_list": [],
            "city": None,
            "use_region_wide": False,
            "is_custom_city": False,
            "category": None,
            "subcat_list": [],
            "subcategory": None,
            "search_results": [],
            "shown_count": 0
        }
        await ask_for_region(chat_id)

    # ====================== –®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ ======================
    async def ask_for_region(chat_id):
        region_names = list(CITY_STRUCTURE.keys())
        user_steps[chat_id]["region_list"] = region_names

        kb = types.InlineKeyboardMarkup()
        for i, reg_name in enumerate(region_names):
            cb_data = f"srch_region_{i}"
            kb.add(types.InlineKeyboardButton(text=reg_name, callback_data=cb_data))
        kb.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥", callback_data="srch_city_custom"))
        kb.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="srch_city_skip"))
        kb.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="srch_cancel"))

        txt = "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥¬ª, –ª–∏–±–æ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:"
        await bot.send_message(chat_id, txt, reply_markup=kb)

    @dp.callback_query(func=lambda call:
        call.data.startswith("srch_region_") or
        call.data in ("srch_city_custom", "srch_city_skip", "srch_cancel"))
    async def handle_region_choice(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if chat_id not in user_steps or user_steps[chat_id]["mode"] != "search_flow":
            return await bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞", show_alert=True)

        st = user_steps[chat_id]

        if call.data == "srch_cancel":
            # –û—Ç–º–µ–Ω–∞
            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
            await bot.send_message(chat_id, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
            user_steps.pop(chat_id, None)
            return None

        if call.data == "srch_city_skip":
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–æ—Ä–æ–¥
            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id, "–ë–µ–∑ –≥–æ—Ä–æ–¥–∞")
            st["city"] = None
            st["use_region_wide"] = False
            st["is_custom_city"] = False
            return await ask_for_category(chat_id)

        if call.data == "srch_city_custom":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é
            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id)
            msg = await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ (–ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é):")
            return await bot.register_next_step_handler(msg, process_custom_city)

        # srch_region_{i}
        if call.data.startswith("srch_region_"):
            idx_str = call.data.replace("srch_region_", "")
            try:
                idx = int(idx_str)
            except:
                return await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ä–µ–≥–∏–æ–Ω–∞", show_alert=True)
            regions = st["region_list"]
            if idx < 0 or idx >= len(regions):
                return await bot.answer_callback_query(call.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å", show_alert=True)

            chosen_region = regions[idx]
            st["picked_region"] = chosen_region
            st["is_custom_city"] = False

            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id, f"–†–µ–≥–∏–æ–Ω: {chosen_region}")
            return await show_city_list(chat_id)
        else:
            return None

    async def process_custom_city(message: types.Message):
        chat_id = message.chat.id
        if chat_id not in user_steps or user_steps[chat_id]["mode"] != "search_flow":
            return

        city_str = message.text.strip()
        st = user_steps[chat_id]
        st["city"] = city_str
        st["use_region_wide"] = False
        st["is_custom_city"] = True

        await ask_for_category(chat_id)

    # ====================== –®–∞–≥ 2: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞/–æ–∫—Ä—É–≥–∞ ======================
    async def show_city_list(chat_id):
        st = user_steps[chat_id]
        region_name = st["picked_region"]
        city_list = CITY_STRUCTURE.get(region_name, [])
        st["city_list"] = city_list

        kb = types.InlineKeyboardMarkup()
        # ¬´–ü–æ –≤—Å–µ–º—É —Ä–µ–≥–∏–æ–Ω—É¬ª
        kb.add(types.InlineKeyboardButton(text=f"–ü–æ –≤—Å–µ–º—É —Ä–µ–≥–∏–æ–Ω—É ¬´{region_name}¬ª", callback_data="srch_wide_region"))

        for i, c_name in enumerate(city_list):
            cb = f"srch_city_{i}"
            kb.add(types.InlineKeyboardButton(text=c_name, callback_data=cb))
        kb.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data="srch_back_regions"))

        txt = f"–†–µ–≥–∏–æ–Ω: {region_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–∫—Ä—É–≥ –∏–ª–∏ ¬´–ü–æ –≤—Å–µ–º—É —Ä–µ–≥–∏–æ–Ω—É¬ª:"
        await bot.send_message(chat_id, txt, reply_markup=kb)

    @dp.callback_query(func=lambda call:
        call.data.startswith("srch_city_") or
        call.data in ("srch_wide_region", "srch_back_regions"))
    async def handle_city_selection(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if chat_id not in user_steps or user_steps[chat_id]["mode"] != "search_flow":
            return await bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞", show_alert=True)

        st = user_steps[chat_id]

        if call.data == "srch_back_regions":
            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id)
            return await ask_for_region(chat_id)

        if call.data == "srch_wide_region":
            region_name = st["picked_region"]
            st["city"] = region_name
            st["use_region_wide"] = True
            st["is_custom_city"] = False
            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id, f"–ü–æ –≤—Å–µ–º—É —Ä–µ–≥–∏–æ–Ω—É: {region_name}")
            return await ask_for_category(chat_id)

        if call.data.startswith("srch_city_"):
            idx_str = call.data.replace("srch_city_", "")
            try:
                idx = int(idx_str)
            except:
                return await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –≥–æ—Ä–æ–¥–∞", show_alert=True)
            c_list = st["city_list"]
            if idx < 0 or idx >= len(c_list):
                return await bot.answer_callback_query(call.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å –≥–æ—Ä–æ–¥–∞", show_alert=True)

            chosen_city = c_list[idx]
            region = st["picked_region"]
            st["city"] = f"{region} | {chosen_city}"
            st["use_region_wide"] = False
            st["is_custom_city"] = False

            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id, f"–ì–æ—Ä–æ–¥: {region} | {chosen_city}")
            return await ask_for_category(chat_id)
        else:
            return None

    # ====================== –®–∞–≥ 3: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ======================
    async def ask_for_category(chat_id):
        kb = types.InlineKeyboardMarkup(row_width=2)
        for cat_name in MAIN_CATEGORIES.keys():
            cb = f"srch_cat_{cat_name}"
            kb.add(types.InlineKeyboardButton(text=cat_name, callback_data=cb))
        kb.add(types.InlineKeyboardButton(text="–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="srch_cat_all"))
        kb.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="srch_cancel"))

        await bot.send_message(chat_id, "3) –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ ¬´–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª:", reply_markup=kb)

    @dp.callback_query(func=lambda call:
        call.data.startswith("srch_cat_") or
        call.data in ("srch_cat_all", "srch_cancel"))
    async def handle_category_choice(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        st = user_steps.get(chat_id)
        if not st or st.get("mode") != "search_flow":
            return await bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞", show_alert=True)

        if call.data == "srch_cancel":
            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
            await bot.send_message(chat_id, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
            user_steps.pop(chat_id, None)
            return None

        if call.data == "srch_cat_all":
            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id, "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            st["category"] = None
            st["subcat_list"] = []
            st["subcategory"] = None
            return await do_search(chat_id)

        # –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if call.data.startswith("srch_cat_"):
            cat_name = call.data.replace("srch_cat_", "")
            st["category"] = cat_name

            # —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ MAIN_CATEGORIES[cat_name] –ø–æ –∑–∞–ø—è—Ç—ã–º
            raw_list = MAIN_CATEGORIES.get(cat_name, [])
            flat = []
            for entry in raw_list:
                parts = [p.strip() for p in entry.split(",") if p.strip()]
                flat.extend(parts)
            st["subcat_list"] = flat

            await bot.delete_message(chat_id, call.message.message_id)
            await bot.answer_callback_query(call.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}")

            if not flat:
                # –µ—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                st["subcategory"] = None
                return await do_search(chat_id)
            else:
                return await ask_for_subcategory(chat_id, cat_name)
        else:
            return None

    async def ask_for_subcategory(chat_id, cat_name: str):
        """
        –®–∞–≥ 4: –ø—Ä–µ–¥—Å—Ç–∞¬≠–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π,
        –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞.
        """
        st = user_steps[chat_id]
        sub_list = st.get("subcat_list", [])

        kb = types.InlineKeyboardMarkup(row_width=2)
        for i, name in enumerate(sub_list):
            kb.add(types.InlineKeyboardButton(text=name, callback_data=f"srch_subcat_{i}"))
        kb.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="srch_subcat_skip"))
        kb.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="srch_cancel"))

        await bot.send_message(
            chat_id,
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{cat_name}¬ª: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=kb
        )


    @dp.callback_query(func=lambda call:
        call.data.startswith("srch_subcat_") or call.data == "srch_subcat_skip")
    async def handle_subcat_choice(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        st = user_steps.get(chat_id)
        if not st or st.get("mode") != "search_flow":
            return await bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞", show_alert=True)

        if call.data == "srch_subcat_skip":
            st["subcategory"] = None
            await bot.answer_callback_query(call.id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        else:
            idx = int(call.data.replace("srch_subcat_", ""))
            sub_list = st.get("subcat_list", [])
            if 0 <= idx < len(sub_list):
                chosen = sub_list[idx]
                st["subcategory"] = chosen
                await bot.answer_callback_query(call.id, f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {chosen}")
            else:
                return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å", show_alert=True)

        await bot.delete_message(chat_id, call.message.message_id)
        return await do_search(chat_id)

    # ====================== –®–∞–≥‚ÄØ4: –ü–æ–∏—Å–∫ ======================
    async def do_search(chat_id):
        st = user_steps[chat_id]
        city = st["city"]
        region_ok = st["use_region_wide"]
        is_custom = st["is_custom_city"]
        cat = st["category"]
        subcat = st["subcategory"]

        with SessionLocal() as sess:
            # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            q = sess.query(Ad).filter(
                Ad.status == "approved",
                Ad.is_active == True
            )

            # --- —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É -------------------------------
            if city is not None:
                if is_custom:
                    q = q.filter(Ad.city.ilike(f"%{city}%"))
                elif region_ok:
                    q = q.filter(Ad.city.ilike(f"{city}%"))
                else:
                    q = q.filter(Ad.city == city)

            # --- —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---------------------------
            if cat:
                q = q.filter(Ad.category == cat)
            if subcat:
                q = q.filter(Ad.subcategory == subcat)

            ads_found = q.order_by(Ad.created_at.desc()).all()

        st["search_results"] = ads_found
        st["shown_count"] = 0

        if not ads_found:
            await bot.send_message(
                chat_id,
                "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
                reply_markup=main_menu_keyboard()
            )
            user_steps.pop(chat_id, None)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        slice_ = ads_found[:10]
        st["shown_count"] = len(slice_)

        kb = build_results_kb(chat_id, slice_)
        text = f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(ads_found)}.\n–í—ã–±–µ—Ä–∏—Ç–µ:"
        sent = await bot.send_message(chat_id, text, reply_markup=kb)

        st["last_list_msg_id"] = sent.message_id

    def build_results_kb(chat_id, ads_slice):
        st = user_steps[chat_id]
        kb = types.InlineKeyboardMarkup()
        for ad_obj in ads_slice:
            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            label = ad_obj.inline_button_text or (ad_obj.text[:15] + "...")
            cb_data = f"srch_openad_{ad_obj.id}"
            kb.add(types.InlineKeyboardButton(text=label, callback_data=cb_data))
        if st["shown_count"] < len(st["search_results"]):
            kb.add(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="srch_show_more"))
        return kb

    @dp.callback_query(func=lambda call: call.data == "srch_show_more")
    async def handle_show_more(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        st = user_steps.get(chat_id)
        if not st or st["mode"] != "search_flow":
            return await bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞", show_alert=True)

        ads = st["search_results"]
        shown = st["shown_count"]
        slice_ = ads[shown: shown + 10]
        if not slice_:
            return await bot.answer_callback_query(call.id, "–ë–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.", show_alert=True)

        st["shown_count"] += len(slice_)
        kb = build_results_kb(chat_id, slice_)

        try:
            await bot.edit_message_reply_markup(chat_id,
                                                st["last_list_msg_id"],
                                                reply_markup=kb)
        except:
            sent = await bot.send_message(chat_id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=kb)
            st["last_list_msg_id"] = sent.message_id  # –≤–¥—Ä—É–≥ —Å—Ç–∞—Ä–æ–µ –Ω–µ–ª—å–∑—è –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å

        return await bot.answer_callback_query(call.id)

    # ================== –ü–æ–∫–∞–∑ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ==================
    @dp.callback_query(func=lambda call: call.data.startswith("srch_openad_"))
    async def handle_open_ad(call: types.CallbackQuery):
        ad_id = int(call.data.replace("srch_openad_", ""))
        chat_id = call.message.chat.id
        st = user_steps.get(chat_id)

        # --- –±–µ—Ä—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ -----------------------
        with SessionLocal() as sess:
            ad_obj = sess.query(Ad).filter(
                Ad.id == ad_id,
                Ad.status == "approved",
                Ad.is_active == True
            ).first()

            if not ad_obj:
                return await bot.answer_callback_query(
                    call.id,
                    "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.",
                    show_alert=True
                )

            user_obj = sess.query(User).filter_by(id=ad_obj.user_id).first() or User(id=ad_obj.user_id)
            sale_done = sess.query(Sale).filter_by(
                ad_id=ad_id,
                buyer_id=call.from_user.id,
                status="completed"
            ).first()

        # --- —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---------------------
        cat_info = ad_obj.category or "‚Äî"
        if ad_obj.subcategory:
            cat_info += f" / {ad_obj.subcategory}"
        city_info = ad_obj.city or "‚Äî"

        caption = (
            f"{ad_obj.text}\n\n"
            f"–¶–µ–Ω–∞: {ad_obj.price} —Ä—É–±.\n"
            f"–ö–æ–ª-–≤–æ: {ad_obj.quantity}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_info}\n"
            f"–ì–æ—Ä–æ–¥: {city_info}\n\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{user_obj.username or user_obj.id}\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )

        kb = types.InlineKeyboardMarkup(row_width=2)
        buy_lbl = f"–ö—É–ø–∏—Ç—å ¬´{ad_obj.inline_button_text}¬ª" if ad_obj.inline_button_text else "–ö—É–ø–∏—Ç—å"
        kb.add(
            types.InlineKeyboardButton(text=buy_lbl, callback_data=f"buy_ad_{ad_obj.id}"),
            types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_ad_{ad_obj.id}")
        )
        kb.add(types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", callback_data=f"write_seller_ad_{ad_obj.id}"))

        if sale_done:
            kb.add(types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"feedback_ad_{ad_obj.id}"))
        else:
            kb.add(types.InlineKeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complain_ad_{ad_obj.id}"))

        kb.add(types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã –æ –ø—Ä–æ–¥–∞–≤—Ü–µ", callback_data=f"viewfeedback_seller_{user_obj.id}"))

        # --- –≤—ã–≤–æ–¥–∏–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç ---------------------------
        photos = [p for p in (ad_obj.photos or "").split(",") if p]
        if photos:
            media = [types.InputMediaPhoto(media=photos[0], caption=caption)]
            media.extend(types.InputMediaPhoto(media=p) for p in photos[1:])
            await bot.send_media_group(chat_id, media)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        else:
            await bot.send_message(chat_id, caption, reply_markup=kb)

        await bot.answer_callback_query(call.id)

        # --- –æ–±–Ω–æ–≤–ª—è–µ–º ¬´—Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π¬ª –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º ------
        if st and "last_list_msg_id" in st:
            try:
                await bot.delete_message(chat_id, st["last_list_msg_id"])
            except:
                pass

            slice_ = st["search_results"][:st["shown_count"]]
            new_kb = build_results_kb(chat_id, slice_)
            txt = f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(st['search_results'])}.\n–í—ã–±–µ—Ä–∏—Ç–µ:"
            new_msg = await bot.send_message(chat_id, txt, reply_markup=new_kb)
            st["last_list_msg_id"] = new_msg.message_id
        return None

    # =============== –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è ================
    @dp.callback_query(func=lambda call: call.data.startswith("complain_ad_"))
    async def complain_about_ad(call: types.CallbackQuery):
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–Ω–µ –∫—É–ø–∏–ª –∏–ª–∏ —Å–¥–µ–ª–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞).
        –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AdComplaint, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤.
        """
        ad_id_str = call.data.replace("complain_ad_", "")
        try:
            ad_id = int(ad_id_str)
        except:
            return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è", show_alert=True)

        user_id = call.from_user.id
        await bot.answer_callback_query(call.id)
        # –ü—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã
        msg = await bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É/—Å—É—Ç—å –∂–∞–ª–æ–±—ã:")
        user_steps[user_id] = {"complaint_ad_id": ad_id}
        return await bot.register_next_step_handler(msg, process_complaint_text)

    async def process_complaint_text(message: types.Message):
        user_id = message.chat.id
        if user_id not in user_steps or "complaint_ad_id" not in user_steps[user_id]:
            return await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        ad_id = user_steps[user_id]["complaint_ad_id"]
        text_of_complaint = message.text.strip()

        from database import AdComplaint
        with SessionLocal() as sess:
            ad_obj = sess.query(Ad).filter_by(id=ad_id).first()
            if not ad_obj:
                await bot.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∂–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                user_steps.pop(user_id, None)
                return None

            # –°–æ–∑–¥–∞—ë–º –∂–∞–ª–æ–±—É
            complaint = AdComplaint(
                ad_id=ad_id,
                user_id=user_id,
                text=text_of_complaint,
                status="new"
            )
            sess.add(complaint)
            sess.commit()
            c_id = complaint.id

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            # –°–æ–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
            ADMIN_COMPLAINT_CHAT_ID = -1002288960086  # –∏–ª–∏ –≤–∞—à ID –≥—Ä—É–ø–ø—ã
            kb_admin = types.InlineKeyboardMarkup()
            kb_admin.add(
                types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", callback_data=f"complaint_msg_seller_{c_id}"),
                types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=f"complaint_del_ad_{c_id}"),
                types.InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"complaint_ban_{c_id}")
            )

            await bot.send_message(
                ADMIN_COMPLAINT_CHAT_ID,
                f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞ #{c_id} –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}.\n"
                f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user_id}.\n"
                f"–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:\n{text_of_complaint}\n\n"
                "–î–µ–π—Å—Ç–≤–∏—è:",
                reply_markup=kb_admin
            )

        await bot.send_message(user_id, "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        user_steps.pop(user_id, None)
        return None

    # =============== ¬´–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É¬ª –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ ================
    @dp.callback_query(func=lambda call: call.data.startswith("write_seller_ad_"))
    async def handle_write_seller(call: types.CallbackQuery):
        """
        –°–æ–∑–¥–∞—ë—Ç (–∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç) AdChat –∏ —à–ª—ë—Ç –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å / –û—Ç–≤–µ—Ç–∏—Ç—å¬ª.
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:
          ‚Ä¢ –∏–∑–±–µ–≥–∞–µ–º DetachedInstanceError¬†‚Äî¬†—Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑¬†—Å–µ—Å—Å–∏–∏;
          ‚Ä¢ —Å—Ç—Ä–∞—Ö—É–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –µ—Å—Ç—å –≤¬†—Ç–∞–±–ª–∏—Ü–µ users.
        """
        buyer_id = call.from_user.id
        buyer_name = call.from_user.username
        ad_id = int(call.data.replace("write_seller_ad_", ""))

        # ---------- —Ä–∞–±–æ—Ç–∞ —Å –ë–î -------------
        with SessionLocal() as sess:

            # 1. –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            ad = sess.query(Ad).filter_by(id=ad_id, status="approved").first()
            if not ad or ad.user_id == buyer_id:
                return await bot.answer_callback_query(
                    call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —ç—Ç–æ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.",
                    show_alert=True
                )
            seller_id = ad.user_id

            # 2. –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            def ensure_user(u_id, uname=None):
                row = sess.query(User).filter_by(id=u_id).first()
                if not row:
                    row = User(id=u_id, username=uname)
                    sess.add(row)
                elif uname and row.username != uname:
                    row.username = uname
                return row

            ensure_user(buyer_id, buyer_name)
            ensure_user(seller_id)

            # 3. –Ω–∞—Ö–æ–¥–∏–º / —Å–æ–∑–¥–∞—ë–º —á–∞—Ç
            chat = (sess.query(AdChat)
                    .filter_by(ad_id=ad_id,
                               buyer_id=buyer_id,
                               seller_id=seller_id)
                    .first())
            if not chat:
                chat = AdChat(ad_id=ad_id,
                              buyer_id=buyer_id,
                              seller_id=seller_id,
                              status="open")
                sess.add(chat)

            sess.commit()
            chat_id_db = chat.id  # <‚Äë‚Äë —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ with‚Äë–±–ª–æ–∫–∞

        # ---------- UI -------------
        kb_open = types.InlineKeyboardMarkup(row_width=1)
        kb_open.add(
            types.InlineKeyboardButton(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"open_chat_{chat_id_db}"),
            types.InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"chat_write_{chat_id_db}")
        )

        # –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        await bot.send_message(
            buyer_id,
            f"–û—Ç–∫—Ä—ã—Ç —á–∞—Ç #{chat_id_db} —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º (–æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}).",
            reply_markup=kb_open
        )

        # –ø—Ä–æ–¥–∞–≤—Ü—É
        mention = f"@{buyer_name}" if buyer_name else f"#{buyer_id}"
        await bot.send_message(
            seller_id,
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {mention} –Ω–∞–ø–∏—Å–∞–ª –≤–∞–º –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id}.",
            reply_markup=kb_open
        )

        return await bot.answer_callback_query(call.id, "–ß–∞—Ç —Å–æ–∑–¥–∞–Ω.")
