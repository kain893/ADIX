#!/usr/bin/env python3
import dataclasses
from datetime import datetime, timezone
from decimal import Decimal
from typing import List, Dict

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config import ADMIN_IDS, MARKIROVKA_GROUP_ID, ADMIN_EXTENSION_CHAT_ID, ADMIN_WITHDRAW_CHAT_ID, ADMIN_TOPUP_CHAT_ID, \
    ADMIN_PROFILE_CHAT_ID
from database import SessionLocal, User, Ad, TopUp, Withdrawal, AdChat, AdChatMessage, ChatGroup
from utils import main_menu_keyboard, rus_status


class ProfileStates(StatesGroup):
    chat_write = State()
    edit_profile = State()
    waiting_for_company_input = State()
    waiting_for_inn_input = State()
    waiting_for_fio_input = State()

class FinanceStates(StatesGroup):
    waiting_for_topup_sum = State()
    waiting_for_withdrawal_sum = State()
    waiting_for_withdrawal_acc = State()

@dataclasses.dataclass
class ProfileChange:
    user_id: int
    field: str
    value: str

# –∑–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
pending_profile_changes: Dict[int, ProfileChange] = {}
def register_profile_handlers(bot: Bot, dp: Dispatcher, user_steps: dict):
    # ------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -------------------
    @dp.message(lambda m: m.text == "üìú–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    async def cabinet_menu(message: types.Message):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [
                types.KeyboardButton(text="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
                types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
            ],
            [
                types.KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
                types.KeyboardButton(text="–í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞")
            ],
            [
                types.KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            ]
        ])
        await bot.send_message(message.chat.id, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=kb)

    @dp.message(lambda m: m.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    async def back_to_main(message: types.Message):
        await bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    # ------------------- –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è -------------------
    @dp.message(lambda m: m.text == "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    async def my_ads(message: types.Message):
        user_id = message.chat.id
        with SessionLocal() as sess:
            ads = sess.query(Ad).filter_by(user_id=user_id).all()

        if not ads:
            return await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=main_menu_keyboard())

        buttons: List[List[types.InlineKeyboardButton]] = []
        for ad in ads:
            status_ru = rus_status(ad.status)
            note = "" if ad.is_active else " / –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
            btn = f"#{ad.id} ({status_ru}{note})"
            buttons.append([ types.InlineKeyboardButton(text=btn, callback_data=f"profile_my_ad_{ad.id}") ])
        buttons.append([ types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="profile_myads_close") ])
        kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return await bot.send_message(user_id, "–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=kb)

    # ---------- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–¥–ª–∏—Ç—å¬ª ----------
    @dp.callback_query(
        lambda c: c.data.startswith("profile_my_ad_") or c.data == "profile_myads_close"
    )
    async def handle_profile_my_ads(call: types.CallbackQuery):
        user_id = call.from_user.id
        data = call.data

        # –∑–∞–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫
        if data == "profile_myads_close":
            await bot.delete_message(user_id, call.message.message_id)
            return await bot.answer_callback_query(call.id)

        # –≤—ã—Ç—è–Ω—É—Ç—å ID
        ad_id = int(data.split("_")[-1])
        with SessionLocal() as sess:
            ad = sess.query(Ad).get(ad_id)

        if not ad or ad.user_id != user_id:
            return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

        # —Ä–∞—Å—á—ë—Ç –¥–Ω–µ–π
        days_passed = (datetime.now(timezone.utc) - ad.created_at).days
        days_left   = max(0, 30 - days_passed)
        expired     = days_passed >= 30
        price       = ad.price or Decimal("0")
        fee         = (price * Decimal("0")).quantize(Decimal("0"))

        caption = (
            f"<b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad.id}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: {rus_status(ad.status)}{' / –ù–µ–∞–∫—Ç–∏–≤–Ω–æ' if not ad.is_active else ''}\n\n"
            f"{ad.text}\n\n"
            f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n"
            f"–†–∞–∑–º–µ—â–µ–Ω–æ: {ad.created_at.strftime('%d.%m.%Y')}\n"
            + ("‚õîÔ∏è –°—Ä–æ–∫ –∏—Å—Ç—ë–∫!\n" if expired else f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n")
        )

        buttons: List[List[types.InlineKeyboardButton]] = []
        # –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ, —Å—Ä–æ–∫ –≤—ã—à–µ–ª –∏–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å <5 –¥–Ω–µ–π
        if not ad.is_active or expired or days_left < 5:
            buttons.append([ types.InlineKeyboardButton(
                text=f"–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)",
                callback_data=f"extend_ad_{ad.id}"
            ) ])
        buttons.append([ types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile_back_to_ads") ])
        kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(user_id, call.message.message_id)
        await bot.send_message(user_id, caption, parse_mode="HTML", reply_markup=kb)
        return await bot.answer_callback_query(call.id)

    # ------------------- ¬´–ù–∞–∑–∞–¥¬ª –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π -------------------
    @dp.callback_query(lambda c: c.data == "profile_back_to_ads")
    async def back_to_ads(call: types.CallbackQuery):
        await bot.answer_callback_query(call.id)
        # –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É ¬´–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è¬ª
        await my_ads(call.message)

    # ------------------- –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ -------------------
    @dp.callback_query(lambda c: c.data.startswith("extend_ad_"))
    async def extend_ad_callback(call: types.CallbackQuery):
        user_id = call.from_user.id
        ad_id   = int(call.data.split("_")[-1])

        with SessionLocal() as sess:
            ad = sess.query(Ad).get(ad_id)

        if not ad or ad.user_id != user_id:
            return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

        # —à–ª—ë–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É
        kb_admin = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_ext_{ad_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_ext_{ad_id}")
        ]])
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            ADMIN_EXTENSION_CHAT_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad_id} –Ω–∞ 30 –¥–Ω–µ–π.",
            reply_markup=kb_admin
        )
        return await bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")

    # ------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è -------------------
    @dp.callback_query(
        lambda c: c.data.startswith("approve_ext_") or c.data.startswith("reject_ext_")
    )
    async def handle_extension_decision(call: types.CallbackQuery):
        admin_id = call.from_user.id
        if admin_id not in ADMIN_IDS:
            return await bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)

        action, _, ad_id_str = call.data.partition("_ext_")
        ad_id = int(ad_id_str)

        with SessionLocal() as sess:
            ad = sess.query(Ad).get(ad_id)
            if not ad:
                return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

            # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π
            await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

            if action == "approve":
                ad.is_active  = True
                ad.created_at = datetime.now(timezone.utc)
                sess.commit()
                await bot.send_message(call.message.chat.id, f"‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ #{ad_id} –æ–¥–æ–±—Ä–µ–Ω–æ.")
                await bot.send_message(ad.user_id, f"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ 30 –¥–Ω–µ–π –∏ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ!")
            else:
                await bot.send_message(call.message.chat.id, f"‚ùå –ü—Ä–æ–¥–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
                await bot.send_message(ad.user_id, f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad_id} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

        await bot.answer_callback_query(call.id)

        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É my_ads
        with SessionLocal() as session:
            chat_id = call.message.chat.id
            user = session.query(User).filter_by(id=chat_id).first()
            if not user:
                return await bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_menu_keyboard())

            ads_list = session.query(Ad).filter_by(user_id=user.id).all()
            if not ads_list:
                return await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=main_menu_keyboard())

            buttons = [
                [ types.InlineKeyboardButton(
                    text=f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_obj.id} ({rus_status(ad_obj.status)})",
                    callback_data=f"profile_my_ad_{ad_obj.id}"
                ) ] for ad_obj in ads_list
            ]
            buttons.append([ types.InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="profile_myads_close") ])
            kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            return await bot.send_message(chat_id, "–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=kb)

    # ---------- –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ 30 –¥–Ω–µ–π --------------------
    @dp.callback_query(lambda c: c.data.startswith("extend_ad_"))
    async def extend_ad_callback(call: types.CallbackQuery):
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ 30 –¥–Ω–µ–π.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-—á–∞—Ç.
        """
        ad_id = int(call.data.replace("extend_ad_", ""))
        user_id = call.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        with SessionLocal() as sess:
            ad = sess.query(Ad).get(ad_id)
            if not ad or ad.user_id != user_id:
                return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–¥–º–∏–Ω–∞
        kb_admin = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data=f"approve_ext_{ad_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data=f"reject_ext_{ad_id}")
        ]])
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            ADMIN_EXTENSION_CHAT_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or user_id} (ID {user_id})\n"
            f"–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad_id} –Ω–∞ 30 –¥–Ω–µ–π.",
            reply_markup=kb_admin
        )
        return await bot.send_message(
            user_id,
            "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è."
        )

    # ------------------- –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ -------------------
    @dp.callback_query(lambda call: call.data.startswith("profile_myad_exchange_"))
    async def profile_myad_exchange_callback(call: types.CallbackQuery, state: FSMContext):
        """
        –ó–∞–ø—É—Å–∫ "–º–∏–Ω–∏-—Ñ–ª–æ—É" –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –§–æ—Ä–º–∞—Ç2.
        """
        chat_id = call.message.chat.id
        ad_id_str = call.data.replace("profile_myad_exchange_", "")
        try:
            ad_id = int(ad_id_str)
        except:
            return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.", show_alert=True)

        with SessionLocal() as session:
            ad_obj = session.query(Ad).filter_by(id=ad_id).first()
            if not ad_obj:
                return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            if ad_obj.ad_type == "format2":
                return await bot.answer_callback_query(call.id, "–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –Ω–∞ –±–∏—Ä–∂–µ!", show_alert=True)

            user = session.query(User).filter_by(id=chat_id).first()
            if not user or user.is_banned:
                return await bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –±–∏—Ä–∂–µ (–±–∞–Ω –∏–ª–∏ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).", show_alert=True)

        await bot.delete_message(chat_id, call.message.message_id)
        await bot.answer_callback_query(call.id)

        user_steps[chat_id] = {
            "exchange_existing_ad": True,
            "ad_id": ad_id,
            "region": None,
            "chatgroup_id": None,
            "chatgroup_price": 0.0,
            "post_count": 1,
            "total_sum": 0.0,
            "need_fio": False,
            "need_inn": False,
            "need_company": False
        }
        return await check_and_ask_missing_profile_data(chat_id, state)

    async def check_and_ask_missing_profile_data(chat_id, state: FSMContext):
        with SessionLocal() as session:
            user = session.query(User).filter_by(id=chat_id).first()
            if not user:
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                user_steps.pop(chat_id, None)
                return None

            # –§–ò–û
            if not user.full_name:
                user_steps[chat_id]["need_fio"] = True
                kb = types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange_flow")
                ]])
                await state.set_state(ProfileStates.waiting_for_fio_input)
                return await bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):", reply_markup=kb)

            # –ö–æ–º–ø–∞–Ω–∏—è
            if not user.company_name:
                user_steps[chat_id]["need_company"] = True
                kb = types.InlineKeyboardMarkup(inline_keyboard=[
                    [ types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="exchange_company_skip") ],
                    [ types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange_flow") ]
                ])
                await state.set_state(ProfileStates.waiting_for_company_input)
                return await bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:", reply_markup=kb)

            # –ò–ù–ù
            if not user.inn:
                user_steps[chat_id]["need_inn"] = True
                digits_needed = 13 if user.company_name else 12
                kb = types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange_flow")
                ]])
                await state.set_state(ProfileStates.waiting_for_inn_input)
                return await bot.send_message(
                    chat_id,
                    f"–£–∫–∞–∂–∏—Ç–µ –ò–ù–ù ({digits_needed} —Ü–∏—Ñ—Ä):",
                    reply_markup=kb
                )

        # –ï—Å–ª–∏ –≤—Å—ë –µ—Å—Ç—å ‚Äì —Å—Ä–∞–∑—É –∏–¥—ë–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞
        return await ask_exchange_region(chat_id)

    @dp.message(ProfileStates.waiting_for_fio_input)
    async def process_exchange_fio(message: types.Message, state: FSMContext):
        chat_id = message.chat.id
        fio = message.text.strip()
        if not fio:
            await state.clear()
            return await check_and_ask_missing_profile_data(chat_id, state)
        with SessionLocal() as session:
            user = session.query(User).filter_by(id=chat_id).first()
            if user:
                user.full_name = fio
                session.commit()
        await state.clear()
        return await check_and_ask_missing_profile_data(chat_id, state)

    @dp.callback_query(lambda call: call.data == "exchange_company_skip")
    async def exchange_company_skip(call: types.CallbackQuery, state: FSMContext):
        chat_id = call.message.chat.id
        await bot.delete_message(chat_id, call.message.message_id)
        await state.clear()
        with SessionLocal() as session:
            user = session.query(User).filter_by(id=chat_id).first()
            if user:
                user.company_name = None
                session.commit()
        await bot.answer_callback_query(call.id, "–ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        await check_and_ask_missing_profile_data(chat_id, state)

    @dp.message(ProfileStates.waiting_for_company_input)
    async def process_exchange_company(message: types.Message, state: FSMContext):
        chat_id = message.chat.id
        company_name = message.text.strip()
        with SessionLocal() as session:
            user = session.query(User).filter_by(id=chat_id).first()
            if user:
                user.company_name = company_name
                session.commit()
        await state.clear()
        await check_and_ask_missing_profile_data(chat_id, state)

    @dp.message(ProfileStates.waiting_for_inn_input)
    async def process_exchange_inn(message: types.Message, state: FSMContext):
        chat_id = message.chat.id
        inn_str = message.text.strip()
        with SessionLocal() as session:
            user = session.query(User).filter_by(id=chat_id).first()
            if not user:
                await state.clear()
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                user_steps.pop(chat_id, None)
                return None
            digits_needed = 13 if user.company_name else 12
            if len(inn_str) != digits_needed or not inn_str.isdigit():
                await state.clear()
                return await check_and_ask_missing_profile_data(chat_id, state)
            user.inn = inn_str
            session.commit()
        await state.clear()
        return await check_and_ask_missing_profile_data(chat_id, state)

    @dp.callback_query(lambda call: call.data == "cancel_exchange_flow")
    async def cancel_exchange_flow(call: types.CallbackQuery, state: FSMContext):
        chat_id = call.message.chat.id
        await bot.delete_message(chat_id, call.message.message_id)
        await state.clear()
        user_steps.pop(chat_id, None)
        await bot.answer_callback_query(call.id, "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())

    # ---- –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –∏ —á–∞—Ç–∞ ----------------------------------------
    async def ask_exchange_region(chat_id):
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [ types.InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞", callback_data="exchg_region_moscow") ],
            [ types.InlineKeyboardButton(text="–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="exchg_region_mo") ],
            [ types.InlineKeyboardButton(text="–ì–æ—Ä–æ–¥–∞ –†–§", callback_data="exchg_region_rf") ],
            [ types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange_flow") ]
        ])
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:", reply_markup=kb)

    @dp.callback_query(lambda call: call.data in ["exchg_region_moscow", "exchg_region_mo", "exchg_region_rf"])
    async def handle_exchange_region_choice(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if chat_id not in user_steps:
            return

        if call.data == "exchg_region_moscow":
            user_steps[chat_id]["region"] = "moscow"
        elif call.data == "exchg_region_mo":
            user_steps[chat_id]["region"] = "mo"
        else:
            user_steps[chat_id]["region"] = "rf"

        await bot.delete_message(chat_id, call.message.message_id)
        await bot.answer_callback_query(call.id)
        await ask_exchange_chatgroup(chat_id)

    async def ask_exchange_chatgroup(chat_id):
        region_key = user_steps[chat_id]["region"]

        def detect_region(title: str) -> str:
            low = title.lower()
            if "–º–æ—Å–∫–≤" in low and "–æ–±–ª–∞—Å—Ç—å" not in low:
                return "moscow"
            elif "–æ–±–ª–∞—Å—Ç—å" in low:
                return "mo"
            else:
                return "rf"

        with SessionLocal() as session:
            all_chats = session.query(ChatGroup).filter_by(is_active=True).all()

        filtered = []
        for c in all_chats:
            r = detect_region(c.title)
            if r == region_key:
                filtered.append(c)

        if not filtered:
            await bot.send_message(chat_id, "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            user_steps.pop(chat_id, None)
            return

        user_steps[chat_id]["exchg_chat_list"] = filtered
        user_steps[chat_id]["exchg_chat_page"] = 0
        await show_exchange_chats_page(chat_id)

    async def show_exchange_chats_page(chat_id):
        data = user_steps[chat_id]
        chats = data["exchg_chat_list"]
        page = data["exchg_chat_page"]
        page_size = 10

        start_i = page * page_size
        end_i = min(start_i + page_size, len(chats))
        sublist = chats[start_i:end_i]

        buttons = [
            [ types.InlineKeyboardButton(text=f"{c.title} (–¶–µ–Ω–∞: {c.price} —Ä—É–±.)", callback_data=f"exchg_pickchat_{c.id}") ]
            for c in sublist
        ]
        if page > 0:
            buttons.append([ types.InlineKeyboardButton(text="‚è™–ù–∞–∑–∞–¥", callback_data="exchg_chatpage_prev") ])
        if end_i < len(chats):
            buttons.append([ types.InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥‚è©", callback_data="exchg_chatpage_next") ])
        buttons.append([ types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange_flow") ])
        kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—Å—Ç—Ä. {page + 1}):", reply_markup=kb)

    @dp.callback_query(lambda call: call.data in ["exchg_chatpage_prev", "exchg_chatpage_next"])
    async def handle_exchg_chatpage_nav(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if chat_id not in user_steps:
            return

        if call.data == "exchg_chatpage_prev":
            user_steps[chat_id]["exchg_chat_page"] -= 1
        else:
            user_steps[chat_id]["exchg_chat_page"] += 1

        await bot.delete_message(chat_id, call.message.message_id)
        await bot.answer_callback_query(call.id)
        await show_exchange_chats_page(chat_id)

    @dp.callback_query(lambda call: call.data.startswith("exchg_pickchat_"))
    async def handle_exchg_pick_chat(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if chat_id not in user_steps:
            return

        cg_id_str = call.data.replace("exchg_pickchat_", "")
        try:
            cg_id = int(cg_id_str)
        except:
            return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Ç", show_alert=True)

        with SessionLocal() as session:
            cg = session.query(ChatGroup).filter_by(id=cg_id).first()
            if not cg:
                return await bot.answer_callback_query(call.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        user_steps[chat_id]["chatgroup_id"] = cg_id
        user_steps[chat_id]["chatgroup_price"] = float(cg.price)

        await bot.delete_message(chat_id, call.message.message_id)
        await bot.answer_callback_query(call.id)
        return await ask_exchange_post_count(chat_id)

    async def ask_exchange_post_count(chat_id):
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", callback_data="exchg_cnt_1"),
                types.InlineKeyboardButton(text="5 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π", callback_data="exchg_cnt_5")
            ],
            [
                types.InlineKeyboardButton(text="10 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π", callback_data="exchg_cnt_10"),
                types.InlineKeyboardButton(text="–ó–∞–∫—Ä–µ–ø (√ó1.6)", callback_data="exchg_cnt_pin")
            ],
            [
                types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange_flow")
            ]
        ])
        await bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?", reply_markup=kb)

    @dp.callback_query(lambda call: call.data.startswith("exchg_cnt_"))
    async def handle_exchg_cnt(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if chat_id not in user_steps:
            return

        val_str = call.data.replace("exchg_cnt_", "")
        if val_str == "pin":
            user_steps[chat_id]["exchg_pin_option"] = True
            user_steps[chat_id]["post_count"] = 1
        else:
            user_steps[chat_id]["exchg_pin_option"] = False
            try:
                cnt = int(val_str)
            except:
                cnt = 1
            user_steps[chat_id]["post_count"] = cnt

        await bot.delete_message(chat_id, call.message.message_id)
        await bot.answer_callback_query(call.id)
        await confirm_exchange_payment(chat_id)

    async def confirm_exchange_payment(chat_id):
        price_one = user_steps[chat_id]["chatgroup_price"]
        cnt = user_steps[chat_id]["post_count"]
        pin = user_steps[chat_id].get("exchg_pin_option", False)

        if pin:
            total_sum = float(price_one) * 1.6
        else:
            total_sum = float(price_one) * cnt

        user_steps[chat_id]["total_sum"] = total_sum

        text = (
            f"–¶–µ–Ω–∞ –∑–∞ 1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {price_one} —Ä—É–±.\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {'–ó–∞–∫—Ä–µ–ø (√ó1.6)' if pin else str(cnt) + ' —Ä–∞–∑–º–µ—â–µ–Ω–∏–π'}.\n"
            f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_sum} —Ä—É–±.\n\n–û–ø–ª–∞—Ç–∏—Ç—å?"
        )
        kb = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="exchg_pay_now"),
            types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange_flow")
        ]])
        await bot.send_message(chat_id, text, reply_markup=kb)

    @dp.callback_query(lambda call: call.data == "exchg_pay_now")
    async def handle_exchg_pay_now(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if chat_id not in user_steps:
            return None
        total_sum = user_steps[chat_id]["total_sum"]

        with SessionLocal() as session:
            user = session.query(User).filter_by(id=chat_id).first()
            if not user:
                return await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

            balance_dec = user.balance
            need_dec = Decimal(str(total_sum))
            if balance_dec < need_dec:
                return await bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!", show_alert=True)

            user.balance = balance_dec - need_dec
            session.commit()

        await bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.")
        return await ask_exchange_marking_fee(chat_id)

    async def ask_exchange_marking_fee(chat_id):
        marking_fee = 50.0
        user_steps[chat_id]["exchg_marking_fee"] = marking_fee
        kb = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É", callback_data="exchg_pay_marking"),
            types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_exchange_flow")
        ]])
        await bot.send_message(
            chat_id,
            f"–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({marking_fee} —Ä—É–±.). –û–ø–ª–∞—Ç–∏—Ç—å?",
            reply_markup=kb
        )

    @dp.callback_query(lambda call: call.data == "exchg_pay_marking")
    async def handle_exchg_pay_marking(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if chat_id not in user_steps:
            return None
        marking_fee = user_steps[chat_id].get("exchg_marking_fee", 50.0)

        with SessionLocal() as session:
            user = session.query(User).filter_by(id=chat_id).first()
            if not user:
                return await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            if user.balance < Decimal(str(marking_fee)):
                return await bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏!", show_alert=True)
            user.balance = user.balance - Decimal(str(marking_fee))
            session.commit()

        await bot.answer_callback_query(call.id, "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞.")
        return await finalize_exchange_ad(chat_id)

    async def finalize_exchange_ad(chat_id):
        data = user_steps[chat_id]
        ad_id = data["ad_id"]
        post_cnt = data["post_count"]
        total_sum = data["total_sum"]
        cg_id = data["chatgroup_id"]

        with SessionLocal() as session:
            ad_obj = session.query(Ad).filter_by(id=ad_id).first()
            if not ad_obj:
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu_keyboard())
                user_steps.pop(chat_id, None)
                return

            user = session.query(User).filter_by(id=chat_id).first()
            if not user:
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard())
                user_steps.pop(chat_id, None)
                return

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç2
            ad_obj.ad_type = "format2"
            ad_obj.status = "pending"
            session.commit()

            cg = session.query(ChatGroup).filter_by(id=cg_id).first()
            inn_info = user.inn or "‚Äî"
            fio_info = user.full_name or user.company_name or "‚Äî"

            photos_list = []
            if ad_obj.photos:
                photos_list = ad_obj.photos.split(",")

            cap = (
                f"–ë–∏—Ä–∂–∞ ADIX (–§–æ—Ä–º–∞—Ç2 - —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)\n\n"
                f"ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad_obj.id}\n"
                f"–ö–Ω–æ–ø–∫–∞: {ad_obj.inline_button_text or '‚Äî'}\n"
                f"–¢–µ–∫—Å—Ç: {ad_obj.text}\n"
                f"–§–ò–û/–ö–æ–º–ø–∞–Ω–∏—è: {fio_info}\n"
                f"–ò–ù–ù: {inn_info}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã (username): @{user.username if user.username else user.id}\n"
                f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {cg.title if cg else '‚Äî'}\n"
                f"–ö–æ–ª-–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {post_cnt}\n"
                f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_sum} —Ä—É–±.\n\n"
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞!"
            )

            kb_mod = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_ad_{ad_obj.id}"),
                    types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_ad_{ad_obj.id}")
                ],
                [
                    types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_ad_{ad_obj.id}")
                ]
            ])
            if photos_list:
                await bot.send_photo(MARKIROVKA_GROUP_ID, photos_list[0], caption=cap, reply_markup=kb_mod)
            else:
                await bot.send_message(MARKIROVKA_GROUP_ID, cap, reply_markup=kb_mod)

        await bot.send_message(
            chat_id,
            f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_obj.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (–§–æ—Ä–º–∞—Ç2). –°—Ç–∞—Ç—É—Å: {rus_status('pending')}.",
            reply_markup=main_menu_keyboard()
        )
        user_steps.pop(chat_id, None)

    # ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è + –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ -----------------
    @dp.message(lambda m: m.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
    async def profile_settings(message: types.Message):
        user_id = message.chat.id
        with SessionLocal() as sess:
            user = sess.query(User).get(user_id)
            if not user:
                return await bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_menu_keyboard())

            ad_cnt = sess.query(Ad).filter_by(user_id=user_id).count()

            txt = (
                f"<b>ID</b>: <code>{user.id}</code>\n"
                f"<b>Username</b>: @{user.username or '‚Äî'}\n"
                f"<b>–ë–∞–ª–∞–Ω—Å</b>: {user.balance} ‚ÇΩ\n"
                f"<b>–û–±—ä—è–≤–ª–µ–Ω–∏–π</b>: {ad_cnt}\n"
                f"<b>–°—Ç–∞—Ç—É—Å</b>: {'üö´ –ó–∞–±–∞–Ω–µ–Ω' if user.is_banned else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n"
                f"<b>–§–ò–û</b>: {user.full_name or '‚Äî'}\n"
                f"<b>–ò–ù–ù</b>: {user.inn or '‚Äî'}\n"
                f"<b>–ö–æ–º–ø–∞–Ω–∏—è</b>: {user.company_name or '‚Äî'}"
            )

        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üñä –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û" if user.full_name else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –§–ò–û",
                    callback_data="edit_profile_fio"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üñä –ò–∑–º–µ–Ω–∏—Ç—å –ò–ù–ù" if user.inn else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ò–ù–ù",
                    callback_data="edit_profile_inn"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üñä –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é" if user.company_name else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é",
                    callback_data="edit_profile_company"
                )
            ],
            [
                types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ])
        return await bot.send_message(user_id, txt, parse_mode="HTML", reply_markup=kb)

    @dp.callback_query(lambda c: c.data == "back_to_main")
    async def back_from_profile(call: types.CallbackQuery):
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        await bot.answer_callback_query(call.id)

    # ---------- —à–∞–≥ 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ ----------
    @dp.callback_query(lambda c: c.data.startswith("edit_profile_"))
    async def ask_new_profile_value(call: types.CallbackQuery, state: FSMContext):
        field = call.data.replace("edit_profile_", "")  # fio / inn / company
        user_steps[call.from_user.id] = {"edit_field": field}

        hints = {
            "fio": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
            "inn": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ò–ù–ù (12 –∏–ª–∏ 13 —Ü–∏—Ñ—Ä):",
            "company": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–ª–∏ ¬´‚àí¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"
        }
        await bot.answer_callback_query(call.id)
        await state.set_state(ProfileStates.edit_profile)
        await bot.send_message(call.from_user.id, hints[field])

    # ---------- —à–∞–≥ 2: –ø–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ ----------
    @dp.message(ProfileStates.edit_profile)
    async def receive_new_profile_value(message: types.Message, state: FSMContext):
        await state.clear()
        uid = message.chat.id
        if uid not in user_steps or "edit_field" not in user_steps[uid]:
            return await bot.send_message(uid, "–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

        field = user_steps[uid]["edit_field"]
        value = message.text.strip()

        # –≤–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
        if field == "inn" and not (value.isdigit() and len(value) in (12, 13)):
            return await bot.send_message(uid, "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 –∏–ª–∏ 13 —Ü–∏—Ñ—Ä.")

        # —Å–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏
        change_id = int(datetime.now(timezone.utc).timestamp() * 1000)
        pending_profile_changes[change_id] = ProfileChange(user_id=uid, field=field, value=value)

        nice_name = {"fio": "–§–ò–û", "inn": "–ò–ù–ù", "company": "–∫–æ–º–ø–∞–Ω–∏—è"}[field]

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        kb_admin = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_profile_{change_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_profile_{change_id}")
        ]])
        await bot.send_message(
            ADMIN_PROFILE_CHAT_ID,
            f"–ó–∞—è–≤–∫–∞ #{change_id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{uid}</code> —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å <b>{nice_name}</b> –Ω–∞:\n\n"
            f"<code>{value}</code>",
            parse_mode="HTML",
            reply_markup=kb_admin
        )

        await bot.send_message(uid, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ¬´{nice_name}¬ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        user_steps.pop(uid, None)
        return None

    # ---------- —à–∞–≥ 3: –∞–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç / –æ—Ç–∫–ª–æ–Ω—è–µ—Ç ----------
    @dp.callback_query(lambda c: c.data.startswith(("approve_profile_", "reject_profile_")))
    async def admin_profile_decision(call: types.CallbackQuery):
        approve = call.data.startswith("approve_profile_")
        change_id = int(call.data.split("_")[-1])

        data = pending_profile_changes.pop(change_id, None)
        if not data:
            return await bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ / —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)

        user_id = data.user_id
        field = data.field
        value = data.value
        nice = {"fio": "–§–ò–û", "inn": "–ò–ù–ù", "company": "–∫–æ–º–ø–∞–Ω–∏—è"}[field]

        if approve:
            with SessionLocal() as sess:
                user = sess.query(User).get(user_id)
                if user:
                    if field == "fio":
                        user.full_name = value
                    elif field == "inn":
                        user.inn = value
                    else:
                        user.company_name = None if value == "‚àí" else value
                    sess.commit()

            await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
            await bot.send_message(call.message.chat.id, f"‚úÖ –ó–∞—è–≤–∫–∞ #{change_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
            await bot.send_message(user_id, f"–í–∞—à–µ {nice_name(nice)} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n{value}")
        else:
            await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
            await bot.send_message(call.message.chat.id, f"‚ùå –ó–∞—è–≤–∫–∞ #{change_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            await bot.send_message(user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ ¬´{nice}¬ª.")

        return await bot.answer_callback_query(call.id)

    # ---------- helper –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è ----------
    def nice_name(src: str) -> str:
        return {"–§–ò–û": "–§–ò–û", "–ò–ù–ù": "–ò–ù–ù", "–∫–æ–º–ø–∞–Ω–∏—è": "–∫–æ–º–ø–∞–Ω–∏—é"}[src]

    # =============== –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ===============
    #
    # 1. /üìú–õ–∏—á–Ω—ã–π¬†–∫–∞–±–∏–Ω–µ—Ç ‚Üí ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å¬ª
    # 2. —É–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É ‚Üí –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É
    # 3. –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω/—á–µ–∫ ‚ñ∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —à–ª—ë—Ç —Ñ–æ—Ç–æ/–¥–æ–∫
    # 4. –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´‚úÖ¬†–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥¬ª / ¬´‚ùå¬†–û—Ç–º–µ–Ω–∏—Ç—å¬ª
    # 5. –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∞ + —Å–∫—Ä–∏–Ω –ª–µ—Ç—è—Ç –≤ –∞–¥–º–∏–Ω‚Äë—á–∞—Ç
    # 6. –∞–¥–º–∏–Ω –∂–º—ë—Ç ¬´–û–¥–æ–±—Ä–∏—Ç—å / –û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª (–∫–æ–ª–ª–±—ç–∫–∏ –±—ã–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ)

    # -----------------------------------------------------------------------------
    @dp.message(lambda m: m.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    async def add_balance(message: types.Message, state: FSMContext):
        await state.set_state(FinanceStates.waiting_for_topup_sum)
        await bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:"
        )

    @dp.message(FinanceStates.waiting_for_topup_sum)
    async def process_topup_amount(message: types.Message, state: FSMContext):
        chat_id = message.chat.id
        try:
            amount = float(message.text.replace(",", "."))
            if not 50 <= amount <= 100000:
                raise ValueError
        except ValueError:
            return await bot.send_message(chat_id,
                                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ù—É–∂–Ω–æ –æ—Ç¬†50¬†–¥–æ¬†100000¬†—Ä—É–±.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        user_steps[chat_id] = {"topup": {"amount": amount}}
        await state.clear()
        return await ask_which_card(chat_id)

    async def ask_which_card(chat_id: int):
        amount = user_steps[chat_id]["topup"]["amount"]
        tmp_id = str(int(datetime.now().timestamp()))

        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–°–±–µ—Ä", callback_data=f"topup_card_sber_{tmp_id}"),
                types.InlineKeyboardButton(text="–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data=f"topup_card_tnk_{tmp_id}")
            ],
            [
                types.InlineKeyboardButton(text="–ê–ª—å—Ñ–∞‚Äë–ë–∞–Ω–∫", callback_data=f"topup_card_alfa_{tmp_id}"),
                types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"topup_cancel_{tmp_id}")
            ]
        ])
        await bot.send_message(
            chat_id,
            f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{amount}¬†—Ä—É–±.</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
            parse_mode="HTML",
            reply_markup=kb
        )

    # ---------- —à–∞–≥¬†1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É ----------
    @dp.callback_query(lambda c: c.data.startswith("topup_card_"))
    async def handle_choose_card(call: types.CallbackQuery):
        chat_id = call.from_user.id
        card_type, tmp_id = call.data.split("_")[2:]  # sber / tnk / alfa

        cards = {
            "sber": ("–°–±–µ—Ä", "2202208053337920"),
            "tnk": ("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "2200701904625982"),
            "alfa": ("–ê–ª—å—Ñ–∞‚Äë–ë–∞–Ω–∫", "2200150982580836")
        }
        if card_type not in cards:
            return await bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã.", show_alert=True)

        system, number = cards[card_type]
        user_steps[chat_id]["topup"].update({"tmp_id": tmp_id,
                                             "card_system": system,
                                             "card_number": number})

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É <b>{system}</b>\n"
                  f"–ù–æ–º–µ—Ä: <code>{number}</code>\n\n"
                  "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—á–µ–∫ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."),
            parse_mode="HTML"
        )
        return await bot.answer_callback_query(call.id)

    # ---------- —à–∞–≥¬†2: –∂–¥—ë–º —Ñ–æ—Ç–æ/–¥–æ–∫ —Å —á–µ–∫–æ–º ----------
    @dp.message(lambda m: m.chat.id in user_steps and "topup" in user_steps[m.chat.id]
                          and "receipt_file_id" not in user_steps[m.chat.id]["topup"],
                F.content_type.in_({ "photo", "document" }))
    async def receive_topup_receipt(message: types.Message):
        uid = message.chat.id
        flow = user_steps[uid]["topup"]

        # –±–µ—Ä—ë–º file_id
        if message.content_type == "photo":
            file_id = message.photo[-1].file_id
        else:
            file_id = message.document.file_id

        flow["receipt_file_id"] = file_id

        kb = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"topup_confirm_{flow['tmp_id']}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"topup_cancel_{flow['tmp_id']}")
        ]])
        await bot.send_message(uid,
                               "–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª "
                               "–∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.", reply_markup=kb)

    # ---------- —à–∞–≥¬†3: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ / –æ—Ç–º–µ–Ω–∞ ----------
    @dp.callback_query(lambda c: c.data.startswith(("topup_confirm_", "topup_cancel_")))
    async def finish_topup_flow(call: types.CallbackQuery):
        uid = call.from_user.id
        flow = user_steps.get(uid, {}).get("topup")
        if not flow:
            return await bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

        confirm = call.data.startswith("topup_confirm_")
        await bot.answer_callback_query(call.id)

        if not confirm:
            user_steps.pop(uid, None)
            return await bot.send_message(uid, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())

        # --- —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î ---
        amount = flow["amount"]
        with SessionLocal() as sess:
            topup = TopUp(
                user_id=uid,
                amount=amount,
                status="pending",
                payment_system=flow["card_system"],
                card_number=flow["card_number"]
            )
            sess.add(topup)
            sess.commit()
            topup_id = topup.id
            # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤–∑—è—Ç—å username
            user_obj = sess.query(User).filter_by(id=uid).first()

        # --- —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        await bot.send_message(
            uid,
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #{topup_id} –Ω–∞ {amount} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=main_menu_keyboard()
        )

        # --- —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ (—Å–æ —Å–∫—Ä–∏–Ω–æ–º) ---
        user_name = f"@{user_obj.username}" if user_obj and user_obj.username else str(uid)
        caption = (
            f"–ó–∞—è–≤–∫–∞ #{topup_id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"–°—É–º–º–∞: <b>{amount} —Ä—É–±.</b>\n"
            f"–°–∏—Å—Ç–µ–º–∞: {flow['card_system']}\n"
            f"–ö–∞—Ä—Ç–∞: <code>{flow['card_number']}</code>"
        )
        kb_admin = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_topup_{topup_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_topup_{topup_id}")
        ]])
        await bot.send_photo(
            ADMIN_TOPUP_CHAT_ID,
            flow["receipt_file_id"],
            caption=caption,
            parse_mode="HTML",
            reply_markup=kb_admin
        )

        # —á–∏—Å—Ç–∏–º —à–∞–≥
        user_steps.pop(uid, None)
        return None

    # ===================== –í–´–í–û–î –ë–ê–õ–ê–ù–°–ê =====================

    @dp.message(lambda m: m.text == "–í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞")
    async def withdraw_balance_step1(message: types.Message, state: FSMContext):
        """
        –®–∞–≥¬†1¬†‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É.
        """
        await state.set_state(FinanceStates.waiting_for_withdrawal_sum)
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ (–º–∏–Ω–∏–º—É–º¬†100¬†—Ä—É–±.):")

    @dp.message(FinanceStates.waiting_for_withdrawal_sum)
    async def withdraw_balance_step2(message: types.Message, state: FSMContext):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É.
        """
        uid = message.chat.id
        try:
            amount = float(message.text.replace(",", "."))
            if amount < 100:
                raise ValueError
        except ValueError:
            return await bot.send_message(uid, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ú–∏–Ω–∏–º—É–º¬†‚Äî¬†100¬†—Ä—É–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        with SessionLocal() as sess:
            user = sess.query(User).get(uid)
            if not user:
                await state.clear()
                return await bot.send_message(uid, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_menu_keyboard())
            if float(user.balance) < amount:
                await state.clear()
                return await bot.send_message(uid, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–±–∞–ª–∞–Ω—Å: {user.balance}¬†—Ä—É–±.).",
                                              reply_markup=main_menu_keyboard())

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–∞–ø
        user_steps[uid] = {"withdraw": {"amount": amount}}
        await state.set_state(FinanceStates.waiting_for_withdrawal_acc)
        return await bot.send_message(uid,
                               "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</b> (16¬†—Ü–∏—Ñ—Ä) –∏–ª–∏ —Å—á—ë—Ç–∞, "
                               "–Ω–∞¬†–∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏:",
                               parse_mode="HTML")

    @dp.message(FinanceStates.waiting_for_withdrawal_acc)
    async def withdraw_balance_step3(message: types.Message, state: FSMContext):
        """
        –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É, —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É, —à–ª—ë–º –∞–¥–º–∏–Ω—É.
        """
        uid = message.chat.id
        flow = user_steps.get(uid, {}).get("withdraw")
        if not flow:
            await state.clear()
            return await bot.send_message(uid, "–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.")

        card = message.text.strip().replace(" ", "")
        # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: 16¬†—Ü–∏—Ñ—Ä
        if not (card.isdigit() and len(card) == 16):
            return await bot.send_message(uid, "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16¬†—Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        amount = flow["amount"]

        # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö)
        with SessionLocal() as sess:
            wd = Withdrawal(user_id=uid,
                            amount=amount,
                            status="pending")
            # –¥–æ–±–∞–≤–∏–º –¥–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –≤—ã —É–∂–µ
            # —Ä–∞—Å—à–∏—Ä—è–ª–∏ –º–æ–¥–µ–ª—å Withdrawal (–∏–Ω–∞—á–µ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏)
            wd.card_number = card
            wd.payment_system = None
            sess.add(wd)
            sess.commit()
            wd_id = wd.id

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()
        await bot.send_message(uid,
                               f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{wd_id} –Ω–∞ —Å—É–º–º—É {amount}¬†—Ä—É–±. "
                               "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                               reply_markup=main_menu_keyboard())

        # ------- —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ -------
        # –∫—Ä–∞—Å–∏–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ username –µ—Å—Ç—å ‚Äî @name,
        # –∏–Ω–∞—á–µ tg://user?id=<id>)
        with SessionLocal() as sess:
            user = sess.query(User).get(uid)

        if user.username:
            user_link = f"@{user.username}"
        else:
            user_link = f"<a href=\"tg://user?id={uid}\">{uid}</a>"

        caption = (
            f"üí∏ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n"
            f"–ó–∞—è–≤–∫–∞: <code>#{wd_id}</code>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
            f"–°—É–º–º–∞: <b>{amount}¬†—Ä—É–±.</b>\n"
            f"–ö–∞—Ä—Ç–∞/—Ä–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{card}</code>"
        )

        kb_admin = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_withdraw_{wd_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{wd_id}")
        ]])
        await bot.send_message(ADMIN_WITHDRAW_CHAT_ID,
                               caption,
                               parse_mode="HTML",
                               reply_markup=kb_admin)

        # –æ—á–∏—â–∞–µ–º steps
        user_steps.pop(uid, None)
        return None

    # ------------------- –í—ã–ª–æ–∂–∏—Ç—å –Ω–∞ –ë–ò–†–ñ–ï (–§–æ—Ä–º–∞—Ç2 –Ω–∞–ø—Ä—è–º—É—é) -------------------
    @dp.message(lambda m: m.text == "–í—ã–ª–æ–∂–∏—Ç—å –Ω–∞ –ë–ò–†–ñ–ï ADIX")
    async def place_on_adix_exchange(message: types.Message, state: FSMContext):
        """
        –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –§–æ—Ä–º–∞—Ç–∞2 (–±–∏—Ä–∂–∞) —á–µ—Ä–µ–∑ add_ads.py
        """
        from add_ads import start_format2_flow_direct
        await start_format2_flow_direct(bot, message, state, user_steps)

    # ------------------- –ß–∞—Ç—ã -------------------
    @dp.message(lambda m: m.text == "–ß–∞—Ç—ã")
    async def show_user_chats(message: types.Message):
        user_id = message.chat.id
        with SessionLocal() as session:
            chats = session.query(AdChat).filter(
                (AdChat.buyer_id == user_id) | (AdChat.seller_id == user_id)
            ).filter(AdChat.status != "closed").all()

            if not chats:
                return await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

            buttons: List[List[types.InlineKeyboardButton]] = []
            for ch in chats:
                role = "–ø—Ä–æ–¥–∞–≤–µ—Ü" if ch.seller_id == user_id else "–ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
                other_id = ch.seller_id if ch.buyer_id == user_id else ch.buyer_id
                other_user = session.query(User).filter_by(id=other_id).first()
                if other_user:
                    other_name = f"@{other_user.username}" if other_user.username else f"User {other_id}"
                else:
                    other_name = f"User {other_id}"
                ad_title = ch.ad.inline_button_text or f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ch.ad_id}"
                buttons.append([types.InlineKeyboardButton(
                    text=f"[{ad_title}] (–í—ã - {role}, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ -> {other_name})",
                    callback_data=f"open_chat_{ch.id}")
                ])
            kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)

            await bot.send_message(user_id, "–í–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ —á–∞—Ç—ã:", reply_markup=kb)
            return None

    # ------------------- –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç -------------------
    @dp.callback_query(lambda call: call.data.startswith("open_chat_"))
    async def open_chat_callback(call: types.CallbackQuery):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ ¬´‚úèÔ∏è¬†–ù–∞–ø–∏—Å–∞—Ç—å¬ª / ¬´üîí¬†–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç¬ª.
        """
        user_id = call.from_user.id
        chat_id_str = call.data.replace("open_chat_", "")

        try:
            chat_db_id = int(chat_id_str)
        except ValueError:
            return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞.", show_alert=True)

        with SessionLocal() as sess:
            chat_obj = sess.query(AdChat).filter_by(id=chat_db_id).first()

            if not chat_obj or chat_obj.status == "closed":
                return await bot.answer_callback_query(call.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)

            # –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü—É
            if user_id not in (chat_obj.buyer_id, chat_obj.seller_id):
                return await bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É!", show_alert=True)

            # —Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
            messages = (sess.query(AdChatMessage)
                        .filter_by(chat_id=chat_db_id)
                        .order_by(AdChatMessage.created_at.asc())
                        .all())

            text_block = ""
            for m in messages:
                who = "–í—ã" if m.sender_id == user_id else "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"
                ts = m.created_at.strftime("%d.%m.%y %H:%M")
                text_block += f"<b>{who}</b> <i>{ts}</i>:\n{m.text}\n\n"

            if not text_block:
                text_block = "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç‚Äë–¥–∏–∞–ª–æ–≥–æ–º
        kb = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"chat_write_{chat_db_id}"),
            types.InlineKeyboardButton(text="üîí –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"chat_close_{chat_db_id}")
        ]])
        await bot.send_message(
            user_id,
            f"–ß–∞—Ç #{chat_db_id}\n\n{text_block}",
            parse_mode="HTML",
            reply_markup=kb
        )
        return await bot.answer_callback_query(call.id)

    @dp.callback_query(lambda call: call.data.startswith("chat_write_"))
    async def chat_write_callback(call: types.CallbackQuery, state: FSMContext):
        user_id = call.from_user.id
        ch_id_str = call.data.replace("chat_write_", "")
        try:
            ch_id = int(ch_id_str)
        except:
            return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞", show_alert=True)

        await bot.answer_callback_query(call.id)
        user_steps[user_id] = {"chat_write": ch_id}
        await state.set_state(ProfileStates.chat_write)
        return await bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")

    @dp.message(ProfileStates.chat_write)
    async def process_chat_message(message: types.Message, state: FSMContext):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        –∏ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–≤–µ—Ç–∏—Ç—å¬ª.
        """
        await state.clear()
        user_id = message.chat.id
        if user_id not in user_steps or "chat_write" not in user_steps[user_id]:
            return await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞.")

        ch_id = user_steps[user_id]["chat_write"]
        text = message.text.strip()

        with SessionLocal() as sess:
            chat = sess.query(AdChat).filter_by(id=ch_id).first()
            if not chat or chat.status == "closed":
                await bot.send_message(user_id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç.")
                user_steps.pop(user_id, None)
                return None
            if chat.buyer_id != user_id and chat.seller_id != user_id:
                await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.")
                user_steps.pop(user_id, None)
                return None

            # —Å—Ç—Ä–∞—Ö—É–µ–º—Å—è: –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–æ—á–Ω–æ –≤ users
            for uid in (chat.buyer_id, chat.seller_id):
                if not sess.query(User).filter_by(id=uid).first():
                    sess.add(User(id=uid))
            sess.flush()  # FK safety

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sess.add(AdChatMessage(chat_id=ch_id,
                                   sender_id=user_id,
                                   text=text))
            sess.commit()

            other_id = chat.seller_id if user_id == chat.buyer_id else chat.buyer_id

        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        kb_reply = types.InlineKeyboardMarkup(inline_keyboard=[
            [ types.InlineKeyboardButton(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"open_chat_{ch_id}") ],
            [ types.InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"chat_write_{ch_id}") ]
        ])
        await bot.send_message(other_id, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ #{ch_id}:\n{text}", reply_markup=kb_reply)
        await bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        user_steps.pop(user_id, None)
        return None

    @dp.callback_query(lambda call: call.data.startswith("chat_close_"))
    async def close_chat_callback(call: types.CallbackQuery):
        user_id = call.from_user.id
        ch_id_str = call.data.replace("chat_close_", "")
        try:
            ch_id = int(ch_id_str)
        except:
            return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞", show_alert=True)

        with SessionLocal() as session:
            chat_obj = session.query(AdChat).filter_by(id=ch_id).first()
            if not chat_obj or chat_obj.status == "closed":
                return await bot.answer_callback_query(call.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
            if chat_obj.buyer_id != user_id and chat_obj.seller_id != user_id:
                return await bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É.", show_alert=True)

            chat_obj.status = "closed"
            session.commit()
            await bot.answer_callback_query(call.id, "–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç.")
            other_id = chat_obj.seller_id if user_id == chat_obj.buyer_id else chat_obj.buyer_id
            await bot.send_message(other_id, f"–ß–∞—Ç #{chat_obj.id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return None
