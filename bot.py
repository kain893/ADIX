#!/usr/bin/env python3

import asyncio
import threading
import time
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–§–æ—Ä–º–∞—Ç ‚Ññ1 –∏ –§–æ—Ä–º–∞—Ç ‚Ññ2)
import add_ads
# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è/–ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏)
import profile
# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–∏—Å–∫–∞ (–≤–∫–ª—é—á–∞–µ—Ç ¬´–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è¬ª / ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª)
import search
# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
import support
# –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (—Ä–∞—Å—Å—ã–ª–∫–∞, –±–∞–Ω, –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏ —Ç.–¥.)
from admin import register_admin_handlers
from config import BOT_TOKEN
from database import init_db, SessionLocal, User, Ad, ScheduledPost, Sale
# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π-—É—Ç–∏–ª–∏—Ç (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, post_ad_to_chat, reserve_funds_for_sale –∏ —Ç.–ø.)
from utils import main_menu_keyboard, post_ad_to_chat

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties())
dp = Dispatcher()
init_db()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (—à–∞–≥–æ–≤) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_steps = {}

# –•—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–∞—Ö:
#  warn_messages[user_id] = (chat_id, warn_message_id, timer_object)
warn_messages = {}

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
register_admin_handlers(bot, dp)
search.register_search_handlers(bot, dp, user_steps)
add_ads.register_add_ads_handlers(bot, dp, user_steps)
profile.register_profile_handlers(bot, dp, user_steps)
support.register_support_handlers(bot, dp)

def get_or_create_user(chat_id, username=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–ø–æ chat_id).
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º; –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ–º username.
    """
    with SessionLocal() as session:
        user = session.query(User).filter_by(id=chat_id).first()
        if not user:
            user = User(id=chat_id, username=username)
            session.add(user)
            session.commit()
        else:
            if username and user.username != username:
                user.username = username
                session.commit()
        return user

async def scheduled_post_worker():
    try:
        with SessionLocal() as session:
            now = datetime.now(timezone.utc)
            tasks = session.query(ScheduledPost).filter(ScheduledPost.next_post_time <= now).all()
            for task in tasks:
                ad_obj = session.query(Ad).filter_by(id=task.ad_id).first()
                if ad_obj and ad_obj.status == "approved":
                    user_obj = session.query(User).filter_by(id=ad_obj.user_id).first()
                    await post_ad_to_chat(bot, task.chat_id, ad_obj, user_obj)

                task.posts_left -= 1
                if task.posts_left > 0:
                    task.next_post_time = now + timedelta(minutes=task.interval_minutes)
                else:
                    session.delete(task)
            session.commit()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ scheduled_post_worker:", e)

def scheduled_post_worker_sync():
    """
    –ü—Ä–∏–º–µ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ScheduledPost.
    –†–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –≤ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ.
    """
    while True:
        asyncio.run(scheduled_post_worker())
        time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
bg_thread = threading.Thread(target=scheduled_post_worker_sync, daemon=True)
bg_thread.start()

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    + —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.
    """
    get_or_create_user(message.chat.id, message.from_user.username)

    greeting = (
        "üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤¬†Adix! üåü\n\n"
        "üõçÔ∏è –≠—Ç–æ –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥.\n\n"
        "üîí –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:\n\n"
        "üìÑ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ ADIX**\n"
        "üí¨ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ß–∞—Ç–æ–≤ –ë–∏—Ä–∂–∏ ADIX**\n\n"
        "‚û°Ô∏è –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await bot.send_message(
        message.chat.id,
        greeting,
        parse_mode="Markdown",
        reply_markup=main_menu_keyboard()
    )

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [ types.InlineKeyboardButton(
                text="üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ ADIX",
                url="https://telegra.ph/Polzovatelskoe-soglashenie-03-25-9"
            ) ],
            [ types.InlineKeyboardButton(
                text="üí¨ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ß–∞—Ç–æ–≤ –ë–∏—Ä–∂–∏ ADIX",
                url="https://telegra.ph/Obshchie-polozheniya-03-25"
            ) ]
        ]
    )
    await bot.send_message(
        message.chat.id,
        "üìå –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:",
        parse_mode="Markdown",
        reply_markup=kb
    )

# ------------------- –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø, –µ—Å–ª–∏ –Ω–µ—Ç /start (–ø—É–Ω–∫—Ç—ã 1 –∏ 2) -------------------
@dp.message(F.chat.type.in_({ "group", "supergroup"}), F.content_type.in_({ "text", "photo", "sticker", "video", "document", "voice", "animation" }))
async def guard_group_messages(message: types.Message):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ (–Ω–µ –¥–µ–ª–∞–ª /start), —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ó–∞—Ç–µ–º –ø–æ—Å—ã–ª–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞.
    –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª—è–µ–º –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤–æ–µ (—É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 2 –º–∏–Ω).
    """
    with SessionLocal() as session:
        user_db = session.query(User).filter_by(id=message.from_user.id).first()

    if not user_db:
        # 1) –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.delete_message(message.chat.id, message.message_id)
        except:
            pass

        # 2) –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ user_id ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ, –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        if message.from_user.id in warn_messages:
            old_chat_id, old_msg_id, old_timer = warn_messages[message.from_user.id]
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            try:
                await bot.delete_message(old_chat_id, old_msg_id)
            except:
                pass
            if old_timer.is_alive():
                old_timer.cancel()
            del warn_messages[message.from_user.id]

        # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        # –ö–Ω–æ–ø–∫–∞ ¬´‚Ü©Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞¬ª
        bot_username = (await bot.get_me()).username
        inline_kb = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(
                text="‚Ü©Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ / –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                url=f"https://t.me/{bot_username}?start=1"
            )
        ]])
        warn_text = (
            "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –Ω–µ –ø—Ä–∏–º–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n"
            "–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´/start¬ª –≤ –±–æ—Ç–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start."
        )
        warn_msg = await bot.send_message(
            message.chat.id,
            warn_text,
            parse_mode="Markdown",
            reply_markup=inline_kb
        )

        # 4) –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 2 –º–∏–Ω—É—Ç—ã, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è
        async def delete_warning(chat_id_val, msg_id_val, user_id_val):
            try:
                await bot.delete_message(chat_id_val, msg_id_val)
            except:
                pass
            # –£–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            if user_id_val in warn_messages:
                del warn_messages[user_id_val]

        def delete_warning_sync(chat_id_val, msg_id_val, user_id_val):
            asyncio.run(delete_warning(chat_id_val, msg_id_val, user_id_val))

        t = threading.Timer(120, delete_warning_sync, args=(message.chat.id, warn_msg.message_id, message.from_user.id))
        t.start()

        # 5) –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –∏ –∑–∞–º–µ–Ω–∏—Ç—å
        warn_messages[message.from_user.id] = (message.chat.id, warn_msg.message_id, t)

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∏—Å–∞—Ç—å
        pass

# ========================= –°–¥–µ–ª–∫–∏ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞) =========================

@dp.callback_query(lambda call: call.data.startswith("buy_ad_"))
async def handle_buy_ad(call: types.CallbackQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ö—É–ø–∏—Ç—å¬ª.
    1) –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –±—ã–ª–æ –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ ‚Äî –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ–π—Ç–∏ –≤ –õ–° –±–æ—Ç–∞.
    2) –ï—Å–ª–∏ –õ–° ‚Äî —É—Ç–æ—á–Ω—è–µ–º ¬´–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?¬ª.
    """
    ad_id_str = call.data.replace("buy_ad_", "")
    try:
        ad_id = int(ad_id_str)
    except:
        await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return None

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ–π—Ç–∏ –≤ –õ–°
    if call.message.chat.type != "private":
        return await bot.answer_callback_query(
            call.id,
            "–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º!",
            show_alert=True
        )

    # –ï—Å–ª–∏ —ç—Ç–æ –õ–°, —É—Ç–æ—á–Ω—è–µ–º
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"confirm_buy_ad_{ad_id}"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_buy_ad_{ad_id}")
    ]])
    await bot.answer_callback_query(call.id)
    return await bot.send_message(
        call.from_user.id,
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
        reply_markup=kb
    )


@dp.callback_query(lambda call: call.data.startswith("confirm_buy_ad_") or call.data.startswith("cancel_buy_ad_"))
async def handle_confirm_buy_ad(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É¬ª / ¬´–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É¬ª.
    """
    if call.data.startswith("confirm_buy_ad_"):
        ad_id_str = call.data.replace("confirm_buy_ad_", "")
        action = "confirm"
    else:
        ad_id_str = call.data.replace("cancel_buy_ad_", "")
        action = "cancel"

    try:
        ad_id = int(ad_id_str)
    except:
        return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", show_alert=True)

    with SessionLocal() as session:
        ad_obj = session.query(Ad).filter_by(id=ad_id).first()
        if not ad_obj:
            return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        if ad_obj.user_id == call.from_user.id:
            return await bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!", show_alert=True)
        if ad_obj.status != "approved":
            return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏–ª–∏ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)

        buyer_id = call.from_user.id
        seller_id = ad_obj.user_id

        if action == "cancel":
            # –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            await bot.answer_callback_query(call.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É.")
            return await bot.send_message(buyer_id, "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        # –ò–Ω–∞—á–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ -> —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –¥–µ–Ω—å–≥–∏
        from utils import reserve_funds_for_sale
        result = reserve_funds_for_sale(bot, buyer_id, seller_id, ad_obj)
        if result == "ok":
            # –°–¥–µ–ª–∫–∞ -> pending
            kb_buyer = types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"confirm_deal_{ad_obj.id}"),
                types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"cancel_deal_{ad_obj.id}")
            ]])
            await bot.answer_callback_query(call.id, "–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã! –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.")
            await bot.send_message(
                buyer_id,
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å ¬´{ad_obj.inline_button_text or ('—Ç–æ–≤–∞—Ä #' + str(ad_id))}¬ª.\n"
                f"–°—É–º–º–∞ {ad_obj.price} —Ä—É–±. –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: pending).\n\n"
                "–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É.\n"
                "–ò–ª–∏ ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ —Å–µ–±–µ.",
                reply_markup=kb_buyer
            )
            # –û–ø–æ–≤–µ—â–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            mention_buyer = f"@{call.from_user.username}" if call.from_user.username else buyer_id
            return await bot.send_message(
                seller_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention_buyer} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_obj.id}.\n"
                f"–°—É–º–º–∞ {ad_obj.price} —Ä—É–±. –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞.\n–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏."
            )
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏
            return await bot.answer_callback_query(call.id, result, show_alert=True)

@dp.callback_query(lambda call: call.data.startswith("confirm_deal_") or call.data.startswith("cancel_deal_"))
async def handle_deal_confirmation(call: types.CallbackQuery):
    """
    ¬´–ü—Ä–∏–Ω—è—Ç—å —Å–¥–µ–ª–∫—É¬ª -> –¥–µ–Ω—å–≥–∏ —É—Ö–æ–¥—è—Ç –ø—Ä–æ–¥–∞–≤—Ü—É
    ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É¬ª -> –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    """
    if call.data.startswith("confirm_deal_"):
        ad_id_str = call.data.replace("confirm_deal_", "")
        action = "confirm"
    else:
        ad_id_str = call.data.replace("cancel_deal_", "")
        action = "cancel"

    try:
        ad_id = int(ad_id_str)
    except:
        return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–¥–µ–ª–∫–∏", show_alert=True)

    with SessionLocal() as session:
        sale_obj = session.query(Sale).filter_by(ad_id=ad_id, buyer_id=call.from_user.id, status="pending").first()
        if not sale_obj:
            return await bot.answer_callback_query(call.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)

        ad_obj = session.query(Ad).filter_by(id=ad_id).first()
        buyer = session.query(User).filter_by(id=sale_obj.buyer_id).first()
        seller = session.query(User).filter_by(id=sale_obj.seller_id).first()

        if not ad_obj or not buyer or not seller:
            return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)

        if action == "confirm":
            sale_obj.status = "completed"
            seller.balance = seller.balance + sale_obj.amount
            session.commit()

            await bot.answer_callback_query(call.id, "–°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—ã
            mention_buyer = f"@{buyer.username}" if buyer.username else buyer.id
            mention_seller = f"@{seller.username}" if seller.username else seller.id

            await bot.send_message(
                seller.id,
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {mention_buyer} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id}.\n"
                f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {sale_obj.amount} —Ä—É–±."
            )
            return await bot.send_message(
                buyer.id,
                f"–°–¥–µ–ª–∫–∞ #{sale_obj.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. {sale_obj.amount} —Ä—É–±. –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É ({mention_seller})."
            )

        else:
            sale_obj.status = "canceled"
            buyer.balance = buyer.balance + sale_obj.amount
            session.commit()

            await bot.answer_callback_query(call.id, "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")
            mention_buyer = f"@{buyer.username}" if buyer.username else buyer.id
            mention_seller = f"@{seller.username}" if seller.username else seller.id

            await bot.send_message(
                seller.id,
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {mention_buyer} –æ—Ç–º–µ–Ω–∏–ª —Å–¥–µ–ª–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id}.\n"
                "–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
            )
            return await bot.send_message(
                buyer.id,
                f"–°–¥–µ–ª–∫–∞ #{sale_obj.id} –æ—Ç–º–µ–Ω–µ–Ω–∞, {sale_obj.amount} —Ä—É–±. –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
            )

@dp.callback_query(lambda call: call.data.startswith("details_ad_"))
async def handle_details_ad(call: types.CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
    """
    ad_id_str = call.data.replace("details_ad_", "")
    try:
        ad_id = int(ad_id_str)
    except:
        return await bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è", show_alert=True)

    with SessionLocal() as session:
        ad_obj = session.query(Ad).filter_by(id=ad_id).first()
        if not ad_obj:
            return await bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

        user_obj = ad_obj.user
        caption = (
            f"–î–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad_obj.id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {ad_obj.inline_button_text or '‚Äî'}\n"
            f"–¢–µ–∫—Å—Ç: {ad_obj.text}\n"
            f"–¶–µ–Ω–∞: {ad_obj.price} —Ä—É–±.\n"
            f"–ö–æ–ª-–≤–æ: {ad_obj.quantity}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad_obj.category}"
            + (f" / {ad_obj.subcategory}" if ad_obj.subcategory else "")
            + f"\n–ì–æ—Ä–æ–¥: {ad_obj.city}\n\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞: @{user_obj.username if user_obj.username else '‚Äî'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"–ö—É–ø–∏—Ç—å ¬´{ad_obj.inline_button_text}¬ª" if ad_obj.inline_button_text else "–ö—É–ø–∏—Ç—å",
                    callback_data=f"buy_ad_{ad_obj.id}"
                )
            ],
            [
                types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"feedback_ad_{ad_obj.id}")
            ],
            [
                types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã –æ –ø—Ä–æ–¥–∞–≤—Ü–µ", callback_data=f"viewfeedback_seller_{ad_obj.user_id}")
            ]
        ])
    await bot.answer_callback_query(call.id)
    return await bot.send_message(call.message.chat.id, caption, reply_markup=kb)

#------------------------------
#DELETE MESSAGES
#------------------------------
@dp.message(F.chat.type.in_({ "group", "supergroup"}), F.content_type.in_({ "text", "photo", "sticker", "video", "document", "voice", "animation" }))
async def guard_group_messages(message: types.Message):
    """
    ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤/—Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞.
    ‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –Ω–∞–∂–∏–º–∞–ª /start ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞¬ª + —Å—Å—ã–ª–∫–∏
      –Ω–∞ –æ–±–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.
    –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞ —É–¥–∞–ª—è–µ–º, —Ç–∞–π–º–µ—Ä –≥–∞—Å–∏–º.
    """
    # --- —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if message.sender_chat is not None:
        return

    user = message.from_user
    if not user:      # —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –±—ã–≤–∞–µ—Ç –≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö
        return

    user_id = user.id

    # --- –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã / —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äì –∏–º –ø–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ
    try:
        member = await bot.get_chat_member(message.chat.id, user_id)
        if member.status in ("administrator", "creator"):
            return
    except Exception:
        # –Ω–µ—Ç –ø—Ä–∞–≤–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–±—ã—á–Ω—ã–º —é–∑–µ—Ä–æ–º
        pass

    # --- —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω? ‚Üí –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å
    with SessionLocal() as session:
        if session.query(User).filter_by(id=user_id).first():
            return

    # =========================== –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è =========================

    # 1) —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass

    # 2) –µ—Å–ª–∏ –≤–∏—Å–∏—Ç —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äì —É–±–∏—Ä–∞–µ–º
    old = warn_messages.pop(user_id, None)
    if old:
        old_chat_id, old_msg_id, old_timer = old
        try:
            await bot.delete_message(old_chat_id, old_msg_id)
        except Exception:
            pass
        if old_timer.is_alive():
            old_timer.cancel()

    # 3) —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    bot_username = (await bot.get_me()).username
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="‚Ü©Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ / –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                url=f"https://t.me/{bot_username}?start=1"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìÑ –ü–æ–ª—å–∑. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ ADIX",
                url="https://telegra.ph/Polzovatelskoe-soglashenie-03-25-9"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üí¨ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ß–∞—Ç–æ–≤ ADIX",
                url="https://telegra.ph/Obshchie-polozheniya-03-25"
            )
        ]
    ])
    warn_text = (
        "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –Ω–µ –ø—Ä–∏–º–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n"
        "–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´/start¬ª –≤ –±–æ—Ç–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.\n\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start."
    )

    warn_msg = await bot.send_message(
        message.chat.id,
        warn_text,
        parse_mode="Markdown",
        reply_markup=kb
    )

    # 4) —Ç–∞–π–º–µ—Ä: —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    async def delete_warning(chat_id_val, msg_id_val, uid_val):
        try:
            await bot.delete_message(chat_id_val, msg_id_val)
        except Exception:
            pass
        warn_messages.pop(uid_val, None)

    def delete_warning_sync(chat_id_val, msg_id_val, uid_val):
        asyncio.run(delete_warning(chat_id_val, msg_id_val, uid_val))

    timer = threading.Timer(
        120,
        delete_warning_sync,
        args=(message.chat.id, warn_msg.message_id, user_id)
    )
    timer.start()

    # 5) —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å
    warn_messages[user_id] = (message.chat.id, warn_msg.message_id, timer)

async def main() -> None:
    # skip_pending=True, —á—Ç–æ–±—ã ¬´–æ—á–∏—â–∞—Ç—å¬ª —Å—Ç–∞—Ä—ã–µ ¬´–≤–∏—Å—è—â–∏–µ¬ª –∞–ø–¥–µ–π—Ç—ã
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
